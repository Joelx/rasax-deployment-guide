# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions
 
from typing import Any, Text, Dict, List
 
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
from rasa_sdk import FormValidationAction
from rasa_sdk.types import DomainDict

import random
import math
from datetime import datetime
from sentence_transformers import SentenceTransformer
from sentence_transformers.util import pytorch_cos_sim 
import pickle
import pandas as pd
from tqdm import  tqdm
import numpy as np
from pprint import pprint

BERTmodel_names=['paraphrase-multilingual-MiniLM-L12-v2','medmediani/Arabic-KW-Mdel','Ezzaldin-97/STS-Arabert','distiluse-base-multilingual-cased-v1','sentence-transformers/LaBSE']
# data_path="mydata/BASE8RGPH24V1_all_12_12_ID"
data_path="mydata/BASE8RGPH24V4_all_18_12_ID"
data_path='mydata/BASE8RGPH24V5_all_08_01_ID'

df=pd.read_excel(data_path +'.xlsx')
unique_values_dict = {k[1]: (k[0][0],k[0][1],v,"situation") for k, v in dict(dict(zip(zip(zip(df["Situation_ID"], df["Module_ID"]), df['Situation ']),df["Situation_ID"]))).items() if (pd.notna(v) and v!='')}
## add tags to comparaison dict 
unique_values_dict.update({k[1]: (k[0][0],k[0][1],v,"tags") for k, v in dict(dict(zip(zip(zip(df["Tags_ID"], df["Module_ID"]), df['Tags']),df["Situation_ID"]))).items() if (pd.notna(v) and v!='')})
unique_values_dict.update({k[1]: (k[0][0],k[0][1],v,'situation Tags') for k, v in dict(dict(zip(zip(zip(df["tags_sit_ID"], df["Module_ID"]), df['situation Tags']),df["Situation_ID"]))).items() if (pd.notna(v) and v!='')})
## add section to comparaison dict
unique_values_dict.update({k[1]: (k[0][0],k[0][1],v,"section") for k, v in dict(dict(zip(zip(zip(df["Section_ID"], df["Module_ID"]), df['Section']),df["Situation_ID"]))).items() if (pd.notna(v) and v!='')})
## add question to comparaison
unique_values_dict.update({k[1]: (k[0][0],k[0][1],v,"question") for k, v in dict(dict(zip(zip(zip(df["Question_ID"], df["Module_ID"]), df["Question AI"]),df["Situation_ID"]))).items() if (pd.notna(v) and v!='')})
unique_values_dict = {key: value for key, value in unique_values_dict.items() if not isinstance(key, float) or not math.isnan(key)}
situations_list = list(unique_values_dict.keys())


# Open the file in write mode and write the dictionary content
with open('unique_values_dict.txt', 'w',encoding='utf-8') as file:
    for key, value in unique_values_dict.items():
        file.write(f"{key}: {value}\n")
        file.write(f"-----------------------------------------------------\n")

        
BERTmodel_name=BERTmodel_names[0]
BERT_model=SentenceTransformer(BERTmodel_name )
pkl_path=data_path+BERTmodel_name.split('/')[0]+'situations_embeddings.pkl'

print('################# using MODEL:', BERTmodel_name)
### initialize weights
        # Your dataset or list of situations
try:
            #Load sentences & embeddings from disc
            with open(pkl_path, "rb") as fIn:
                stored_data = pickle.load(fIn)
                situations = stored_data['situations']
                BERT_weights = stored_data['BERT_weights']
                
                print("BERT model found")


except FileNotFoundError:
                # BERT_model=SentenceTransformer(BERTmodel_)
                print("BERT model loaded")
                
                BERT_weights = BERT_model.encode(situations_list, convert_to_tensor=True,show_progress_bar=True)
                print("BERT model fine-tuned")

                #Store sentences & embeddings on disc
                with open(pkl_path, "wb") as fOut:
                    pickle.dump({'situations': unique_values_dict, 'BERT_weights': BERT_weights}, 
                                fOut, protocol=pickle.HIGHEST_PROTOCOL)
                print("BERT model saved")

def get_unique_elements_with_order(input_list):
    return [element for i, element in enumerate(input_list) if element not in input_list[:i]]



def provide_recommendations(user_input,THRESH, n,df,unique_values_dict,BERT_weights):

  
  input_weight=BERT_model.encode(user_input, show_progress_bar = True,convert_to_tensor=True)
  cosine_scores = pytorch_cos_sim(input_weight, BERT_weights)
  cosine_scores = cosine_scores.cpu().numpy()
  sort_ids=np.argsort(cosine_scores)
  selected_ids=np.flip(sort_ids)[0] 
  # print('ordred cos',[cosine_scores[0][i] for i in selected_ids ])
  # print('selected ordred cos',[cosine_scores[0][i] for i in selected_ids if cosine_scores[0][i]>=THRESH])

  ordred_situations= [(situations_list[i],cosine_scores[0][i]) for i in selected_ids if cosine_scores[0][i]>=THRESH]
  ordred_situations_IDs=[{'input_text':user_input,
                          'similar_text':situation[0],
                          'element_ID':unique_values_dict[situation[0]][0], 
                          'module_ID':unique_values_dict[situation[0]][1],
                          'situation_ID':unique_values_dict[situation[0]][2],
                          'category':unique_values_dict[situation[0]][3],
                          "similarity":situation[1]} for situation in ordred_situations]

#   display(pd.DataFrame(ordred_situations_IDs[:n]))
#   pprint(ordred_situations_IDs)
#   df_with_qst=add_qst_ids(df,pd.DataFrame(ordred_situations_IDs[:n]))
  return (pd.DataFrame(ordred_situations_IDs[:n]))
#   return  ordred_situations[:n],ordred_situations_IDs,get_unique_elements_with_order(ordred_situations_IDs)[:n]

# def add_qst_ids(df, df_rslt):
#     ids=[]
#     for index, row in df_rslt.iterrows():

#         if row['category']=='question':
#             ids.append([row["element_ID"]])
#         if row['category']=='tags':
#             ids.append( df[df['Tags_ID']==row["element_ID"]].Question_ID.unique())
#         if row['category']=='situation':
#             ids.append(df[df['Situation_ID']==row["element_ID"]].Question_ID.unique())
#         if row['category']=='section':
#             ids.append(df[df['Section_ID']==row["element_ID"]].Question_ID.unique())
#     df_rslt['ralated_questions']=ids
#     return df_rslt



# def module_recommendations(df_rslt,n=3):
#     module_ids = df_rslt['module_ID'].unique()[:n].tolist()
#     module_names=[df[df.Module_ID==module_id].module.unique().tolist()[0] for module_id in module_ids]
#     df[df.Module_ID.isin(module_ids)].module.unique().tolist()
#     return module_ids,module_names


# def situation_recommendations(df_rslt,module_id,n=3):
#     output_ids=[]
#     situation_IDs = df_rslt[df_rslt['module_ID']==int(module_id)]["situation_ID"].unique().tolist()
#     print('##########situation_IDs',situation_IDs)
#     print(df_rslt[df_rslt.module_ID==int(module_id)]["situation_ID"].unique())
#     for i in situation_IDs:
#         if i!=22 :   
#             if len(output_ids)<n:
#                 output_ids.append(i)

#     situation_names=[df[df.Situation_ID==output_id]["Situation "].unique().tolist()[0] for output_id in output_ids]
#     # df[df.Situation_ID.isin(output_ids)]["Situation "].unique().tolist()
#     print(situation_names)
#     print(output_ids)
#     return output_ids,situation_names
        

# def question_recommendations(df_rslt_with_qst,situation_ID,n=3):
#     questions=[]
#     if df_rslt_with_qst.head(1)["category"].values[0]=="question" :#and df_rslt_with_qst.head(1)["situation_ID"].values[0]==22:

#         questions=df_rslt_with_qst.head(1)["ralated_questions"].values.tolist()
#     questions.extend(df_rslt_with_qst[df_rslt_with_qst['situation_ID']==situation_ID]["ralated_questions"].values.tolist())
#     output=[]
#     reste=[]
#     question_names=[]
#     reste_question=[]
#     for i in questions:
#         for j in i:
#             if len(output)<n and j not in output :
#                 output.append(j)
#                 question_names.append(df[df.Question_ID==int(j)]["Question AI"].unique().tolist()[0])
#             elif len(output)>=n and j not in output and j not in reste:
                 
#                 reste.append(j)
#                 reste_question.append(df[df.Question_ID==int(j)]["Question AI"].unique().tolist()[0])

#     # question_names=df[df.Question_ID.isin(output)]["Question AI"].unique().tolist()
#     return(output,question_names,reste,reste_question)

# def get_responses(question_id):

#     response=df[df.Question_ID==question_id]['RÃ©ponse  Quasi-finale'].unique().tolist()
#     return(response)
def add_qst_ids(df, df_rslt):

    ids=[]
    for index, row in df_rslt.iterrows():
        id_=[]

        for i in row["ralated_responses"]:
            id_.append(df[df['response_ID']==int(i)].Question_ID.unique())
        ids.append(id_)
    df_rslt['ralated_questions']=ids

    return df_rslt

def add_resp_ids(df, df_rslt):
    ids=[]
    for index, row in df_rslt.iterrows():

        if row['category']=='question':
            ids.append( df[df['Question_ID']==row["element_ID"]].response_ID.unique())
        if row['category']=='tags':
            ids.append( df[df['Tags_ID']==row["element_ID"]].response_ID.unique())
        if row['category']=='situation Tags':
            ids.append( df[df['tags_sit_ID']==row["element_ID"]].response_ID.unique())
        if row['category']=='situation':
            ids.append(df[df['Situation_ID']==row["element_ID"]].response_ID.unique())
        if row['category']=='section':
            ids.append(df[df['Section_ID']==row["element_ID"]].response_ID.unique())
    df_rslt['ralated_responses']=ids
    return df_rslt

def module_recommendations(df_rslt,n=3):
    module_ids = df_rslt['module_ID'].unique()[:n].tolist()
    module_names=[df[df.Module_ID==module_id].module.unique().tolist()[0] for module_id in module_ids]
    df[df.Module_ID.isin(module_ids)].module.unique().tolist()
    return module_ids,module_names


def situation_recommendations(df_rslt,module_id,n=3,nan_id=16):
    output_ids=[]
    situation_IDs = df_rslt[df_rslt['module_ID']==int(module_id)]["situation_ID"].unique().tolist()
    print('##########situation_IDs',situation_IDs)
    print(df_rslt[df_rslt.module_ID==int(module_id)]["situation_ID"].unique())
    for i in situation_IDs:
        if i!=nan_id :   
            if len(output_ids)<n:
                output_ids.append(i)

    situation_names=[df[df.Situation_ID==output_id]["Situation "].unique().tolist()[0] for output_id in output_ids]
    # df[df.Situation_ID.isin(output_ids)]["Situation "].unique().tolist()
    print(situation_names)
    print(output_ids)
    return output_ids,situation_names
        

def question_recommendations(df_rslt_with_qst,situation_ID,n=3):
    questions=[]
    if df_rslt_with_qst.head(1)["category"].values[0]=="question" and df_rslt_with_qst.head(1)["similarity"].values[0]> 0.8 :#and df_rslt_with_qst.head(1)["situation_ID"].values[0]==22:

        questions=df_rslt_with_qst.head(1)["ralated_responses"].values.tolist()
    questions.extend(df_rslt_with_qst[df_rslt_with_qst['situation_ID']==situation_ID]["ralated_responses"].values.tolist())
    output=[]
    reste=[]
    question_names=[]
    reste_question=[]
    resp_done=[]
    for i in questions:
        for j in i:
            q_id=random.choice(df[df.response_ID==int(j)]["Question_ID"].unique().tolist())
            if len(output)<n and q_id not in output and j not in resp_done:
                output.append(q_id)
                resp_done.append(j)
                question_names.append(df[df.Question_ID==int(q_id)]["Question AI"].unique().tolist()[0])
            elif len(output)>=n and q_id not in output and q_id not in reste:
                 
                reste.append(q_id)
                reste_question.append(df[df.response_ID==int(j)]["Question AI"].unique().tolist()[0])

    # question_names=df[df.Question_ID.isin(output)]["Question AI"].unique().tolist()
    return(output,question_names,reste,reste_question)

# def question_recommendations1(df_rslt_with_qst,situation_ID,n=3):
#     questions=[]
#     if df_rslt_with_qst.head(1)["category"].values[0]=="question" :#and df_rslt_with_qst.head(1)["situation_ID"].values[0]==22:

#         questions=df_rslt_with_qst.head(1)["ralated_questions"].values.tolist()
#     questions.extend(df_rslt_with_qst[df_rslt_with_qst['situation_ID']==situation_ID]["ralated_questions"].values.tolist())
#     output=[]
#     reste=[]
#     question_names=[]
#     reste_question=[]
#     for i in questions:
#         for q in i:
#             j=random.choice(q)
#             if len(output)<n and j not in output :
#                 output.append(j)
#                 question_names.append(df[df.Question_ID==int(j)]["Question AI"].unique().tolist()[0])
#             elif len(output)>=n and j not in output and j not in reste:
                 
#                 reste.append(j)
#                 reste_question.append(df[df.Question_ID==int(j)]["Question AI"].unique().tolist()[0])

#     # question_names=df[df.Question_ID.isin(output)]["Question AI"].unique().tolist()
#     return(output,question_names,reste,reste_question)
def get_responses(question_id):

    response=df[df.Question_ID==question_id]['RÃ©ponse  Quasi-finale'].unique().tolist()
    return(response)
class ActionAskNavigateData(Action):
    def name(self) -> str:
        return "action_ask_navigate_data"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict) -> list:
        message = "ÙÙ ØªØ±ÙØ¯ Ø§ÙØªÙÙÙ ÙÙ Ø§ÙØ¨ÙØ§ÙØ§ØªØ"
        buttons = [{"title": "ÙØ¹Ù", "payload": "/affirm"}, {"title": "ÙØ§", "payload": "/deny"}]

        dispatcher.utter_button_message(message, buttons=buttons)
        return []

class ActionStopNavigation(Action):
    def name(self) -> str:
        return "action_stop_navigation"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict) -> list:
        dispatcher.utter_message("Ø¨Ø§ÙØªØ£ÙÙØ¯! Ø¥Ø°Ø§ ÙØ§Ù ÙØ¯ÙÙ Ø£Ù Ø£Ø³Ø¦ÙØ© Ø£Ø®Ø±Ù Ø£Ù Ø¥Ø°Ø§ ÙÙØª Ø¨Ø­Ø§Ø¬Ø© Ø¥ÙÙ ÙØ²ÙØ¯ ÙÙ Ø§ÙÙØ¹ÙÙÙØ§ØªØ ÙÙØ§ ØªØªØ±Ø¯Ø¯ ÙÙ Ø·Ø±Ø­ÙØ§. Ø£ÙØ§ ÙÙØ§ ÙÙÙØ³Ø§Ø¹Ø¯Ø©")
        return []
    
class ActionGetUserQuestion(Action):
    def name(self) -> str:
        return "action_get_user_question"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain) -> list:

        user_message_all = tracker.latest_message.get('text')
        print('################################MESSAGE',user_message_all)
        sender_id = tracker.sender_id
        path="records/df_recommendations_"+sender_id+".xlsx"
        # Assuming you have a function to provide recommendations based on user input
        df_recommendations = provide_recommendations(  user_message_all ,THRESH=0.3, n=1000,df=df,unique_values_dict=unique_values_dict,BERT_weights=BERT_weights)
        df_recommendations.to_excel(path,index=False)
        if df_recommendations.empty:
            dispatcher.utter_message("ÙÙ ÙØ¶ÙÙ Ø£Ø¹Ø¯ ØµÙØ§ØºØ© Ø³Ø¤Ø§ÙÙ")
            return []
        else :
             module_ids,module_names=module_recommendations(df_recommendations,n=3)
            #  button_list = [{"title": module_names[i], "payload": '/module_definitions'+str(module_ids[i])} for i in range(len(module_ids))]
             button_list = [{"title": module_names[i],  "payload": f'/inform_module{{"module_id":"{str(module_ids[i])}"}}'} for i in range(len(module_ids))]

             dispatcher.utter_message(text="Ø§Ø®ØªØ± Ø§ÙÙØ­Ø¯Ø© Ø§ÙÙØªØ¹ÙÙØ© Ø¨Ø³Ø¤Ø§ÙÙ", buttons=button_list)
        # Set the user_question value in a slot for future use
        return [SlotSet("user_question", user_message_all)]


class ActionReselectModule(Action):
    def name(self) -> str:
        return "action_reselect_module"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain) -> list:

        sender_id = tracker.sender_id
        path="records/df_recommendations_"+sender_id+".xlsx"
        # Assuming you have a function to provide recommendations based on user input
        df_recommendations=pd.read_excel(path)
        if df_recommendations.empty:
            dispatcher.utter_message("ÙÙ ÙØ¶ÙÙ Ø£Ø¹Ø¯ ØµÙØ§ØºØ© Ø³Ø¤Ø§ÙÙ")
            return []
        else :
             module_ids,module_names=module_recommendations(df_recommendations,n=3)
            #  button_list = [{"title": module_names[i], "payload": '/module_definitions'+str(module_ids[i])} for i in range(len(module_ids))]
             button_list = [{"title": module_names[i],"payload": f'/inform_module{{"module_id":"{str(module_ids[i])}"}}'} for i in range(len(module_ids))]

             dispatcher.utter_message(text="Ø§Ø®ØªØ± Ø§ÙÙØ­Ø¯Ø© Ø§ÙÙØªØ¹ÙÙØ© Ø¨Ø³Ø¤Ø§ÙÙ", buttons=button_list)
        # Set the user_question value in a slot for future use
        return []
    
class ActionGetModuleId(Action):
    def name(self):
        return "action_get_module_id"

    def run(self, dispatcher, tracker, domain):
        # Extract payload from the latest message

        # module_number = tracker.latest_message['text']

        # print('######module_number',module_number)
        # latest_intent = tracker.latest_message.get("intent", {}).get("name", "")
        latest_entities = tracker.latest_message.get("entities", [])

        if latest_entities:
    # Assuming you have only one entity in the latest message
            entity_name = latest_entities[0].get("entity")
            entity_value = latest_entities[0].get("value")
        print('######latest_intent',entity_name,entity_value)

        # Your action logic here
        return [SlotSet(entity_name, entity_value)]


class ActionGet_Situations(Action):
    def name(self):
        return "action_get_situations"

    def run(self, dispatcher, tracker, domain):
        # Access the ID from the slot
        # module_number = tracker.latest_message['text']
        module_number = tracker.get_slot('module_id')
        print('##############SLOT',module_number)
        # dispatcher.utter_message(text=f"You choosed module{module_number}")
        sender_id = tracker.sender_id
        path="records/df_recommendations_"+sender_id+".xlsx"
        df_rslt=pd.read_excel(path)
        situation_ids,situation_names=situation_recommendations(df_rslt,int(module_number),n=3)
        if situation_ids==[]:
                        dispatcher.utter_message("ÙØ§ ÙÙØ¬Ø¯ Ø§ÙØ³ÙØ§Ù ÙØªØ§Ø­ ÙÙ ÙØ°Ù Ø§ÙÙØ­Ø¯Ø©")
        else:

            button_list = [{"title": situation_names[i], "payload": f'/inform_module{{"situation_id":"{str(situation_ids[i])}"}}'  } for i in range(len(situation_ids))]
            button_list.append({"title": "Ø§ÙÙØ± ÙÙØ§ ÙØ¥Ø¹Ø§Ø¯Ø© Ø¥Ø®ØªÙØ§Ø± Ø§ÙÙØ­Ø¯Ø©", "payload": '/rechoisir_module'})
            dispatcher.utter_message(text= "Ø§Ø®ØªØ± Ø§ÙØ³ÙØ§Ù Ø§ÙØ£ÙØ±Ø¨ Ø¥ÙÙ Ø³Ø¤Ø§ÙÙ",buttons=button_list)
        return []

class ActionGetsituationId(Action):
    def name(self):
        return "action_get_situation_id"

    def run(self, dispatcher, tracker, domain):
        # Extract payload from the latest message

        # situation_number = tracker.latest_message['text']
        # print('######situation_number',situation_number)
        latest_entities = tracker.latest_message.get("entities", [])

        if latest_entities:
    # Assuming you have only one entity in the latest message
            entity_name = latest_entities[0].get("entity")
            entity_value = latest_entities[0].get("value")
        # Your action logic here
        return [SlotSet(entity_name, entity_value)]


class ActionGet_Questions(Action):
    def name(self):
        return "action_get_questions"

    def run(self, dispatcher, tracker, domain):
        # Access the ID from the slot
        # situation_number = tracker.latest_message['text']
        situation_number = tracker.get_slot('situation_id')
        # dispatcher.utter_message(text=f"You choosed situation {situation_number}")

        # Use the ID in your action logic
        sender_id = tracker.sender_id
        path="records/df_recommendations_"+sender_id+".xlsx"
        df_rslt=pd.read_excel(path)      
        # df_with_qst=add_qst_ids(df,df_rslt)
        df_resp=add_resp_ids(df,df_rslt)
        df_with_qst=add_qst_ids(df,df_resp)
        df_with_qst.to_excel(path,index=False)

        question_ids,question_names,reste,reste_question=question_recommendations(df_with_qst,int(situation_number),n=5)
        print(question_ids,question_names)
        if question_ids==[]:
                        dispatcher.utter_message("ÙØ§ ÙÙØ¬Ø¯ Ø³Ø¤Ø§Ù ÙØªØ§Ø­ ÙÙ ÙØ°Ø§ Ø§ÙØ³ÙØ§Ù")
        else:
            print("##########reste", len(reste))
            list_prop=[
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ£ÙØ±Ø¨",
                "Ø­Ø¯Ø¯ Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ°Ù ÙÙØ§Ø³Ø¨Ù Ø£ÙØ«Ø±",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ£ÙØ±Ø¨ Ø¥ÙÙ ÙØ§ ØªØ¨Ø­Ø« Ø¹ÙÙ",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ°Ù ÙÙØ§Ø¦Ù Ø§Ø­ØªÙØ§Ø¬Ø§ØªÙ",
                "Ø§Ø®ØªØ± Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø§ÙØ°Ù ÙØªÙØ§Ø³Ø¨ ÙØ¹ ÙÙØ¶ÙØ¹Ù",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ£ÙØ±Ø¨ Ø¥ÙÙ ÙØªØ·ÙØ¨Ø§ØªÙ",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ°Ù ÙØªÙØ§Ø³Ø¨ ÙØ¹ Ø·ÙØ¨Ù",
                "Ø§Ø®ØªØ± Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø§ÙØ£ÙØ³Ø¨ ÙÙ",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ°Ù ÙÙØ§Ø³Ø¨ Ø·ÙØ¨Ù Ø¨Ø´ÙÙ Ø£ÙØ¶Ù",
                "Ø§Ø®ØªØ§Ø± Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø§ÙØ°Ù ÙØ¹ÙØ³ Ø§ÙØªÙØ§ÙØ§ØªÙ",
                "Ø§Ø®ØªØ± Ø§ÙØ³Ø¤Ø§Ù Ø§ÙØ£ÙØ±Ø¨ Ø¥ÙÙ Ø³Ø¤Ø§ÙÙ"
                    ]
            random.shuffle(list_prop)

            button_list = [{"title": question_names[i], "payload": f'/inform_module{{"question_id":"{str(question_ids[i])}"}}' } for i in range(len(question_ids))]
            dispatcher.utter_message(text= list_prop[0],buttons=button_list)
        return []
    
class ActionGetQuestionId(Action):
    def name(self):
        return "action_get_question_id"

    def run(self, dispatcher, tracker, domain):
        # Extract payload from the latest message

        # question_number = tracker.latest_message['text']
        # print('######question_number',question_number)
        latest_entities = tracker.latest_message.get("entities", [])

        if latest_entities:
    # Assuming you have only one entity in the latest message
            entity_name = latest_entities[0].get("entity")
            entity_value = latest_entities[0].get("value")
        # Your action logic here
        return [SlotSet(entity_name, entity_value)]
    
class ActionGet_Response(Action):
    def name(self):
        return "action_get_response"

    def run(self, dispatcher, tracker, domain):
        # Access the ID from the slot
        # question_number = tracker.latest_message['text']
        question_number = tracker.get_slot('question_id')
        # dispatcher.utter_message(text=f"You choosed question {question_number}")
        response=get_responses(int(question_number))
        # Use the ID in your action logic
        dispatcher.utter_message(text=f" {response[0]}")
        messages = [
            "Ø¥Ø°Ø§ ÙØ§ÙØª ÙØ¯ÙÙ Ø§Ø³ØªÙØ³Ø§Ø±Ø§Øª Ø¥Ø¶Ø§ÙÙØ©Ø ÙÙØ§ ØªØªØ±Ø¯Ø¯ ÙÙ Ø·Ø±Ø­ÙØ§",
            "ÙÙ Ø­Ø§Ù ÙØ§ÙØª ÙØ¯ÙÙ Ø£Ù Ø£Ø³Ø¦ÙØ© Ø¥Ø¶Ø§ÙÙØ©Ø ÙØ§ ØªØªØ±Ø¯Ø¯ ÙÙ Ø§ÙØ³Ø¤Ø§Ù",
            "Ø¥Ø°Ø§ ÙÙØª Ø¨Ø­Ø§Ø¬Ø© Ø¥ÙÙ Ø£Ù Ø§Ø³ØªÙØ³Ø§Ø± Ø¢Ø®Ø±Ø ÙØ£ÙØª Ø­Ø± ÙÙ Ø·Ø±Ø­Ù",
            "Ø¥Ø°Ø§ ÙØ§Ù ÙØ¯ÙÙ Ø³Ø¤Ø§Ù Ø¢Ø®Ø±Ø ÙØ£ÙØ§ ÙÙØ§ ÙÙÙØ³Ø§Ø¹Ø¯Ø©",
            "Ø¥Ø°Ø§ ÙØ§Ù ÙØ¯ÙÙ Ø£Ø³Ø¦ÙØ© Ø£Ø®Ø±ÙØ ÙØ§ ØªØªØ±Ø¯Ø¯ ÙÙ Ø·Ø±Ø­ÙØ§"
                  ]

        # Shuffle the messages randomly
        random.shuffle(messages)

        # Choose and send one of the messages
        response = messages[0]
        dispatcher.utter_message(text=response)

        return []
    
class ActionGuidance(Action):
    def name(self) -> Text:
        return "action_guidance"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        message = (
            "ÙÙØ­ØµÙÙ Ø¹ÙÙ ØªØ¹Ø§Ø±ÙÙ Ø§ÙÙØ­Ø¯Ø§ØªØ Ø§ÙØªØ¨  **ØªØ¹Ø±ÙÙ Ø§ÙÙØ­Ø¯Ø§Øª**\n"
            "ÙÙØ¨Ø­Ø« Ø¹Ù Ø³Ø¤Ø§Ù ÙØ¹ÙÙØ Ø§ÙØªØ¨ **ØªØµÙØ­ Ø§ÙØ¨ÙØ§ÙØ§Øª**"
        )

        dispatcher.utter_message(text=message, parse_mode="Markdown")

        return []
    

    
class ActionUtterModuleButtons(Action):
    def name(self) -> Text:
        return "action_utter_module_buttons"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Define a list of module titles
        module_titles = [
            "ÙÙØ§ÙÙÙ Ø§ÙØªØ¹Ø±Ù Ø¹ÙÙ Ø§ÙÙÙØ¯Ø§Ù",
            "ØªØ­Ø¯ÙØ¯ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©",
            "Ø§ÙÙÙØ²Ø§Øª Ø§ÙØ¯ÙÙÙØºØ±Ø§ÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©",
            "Ø§ÙØ®ØµÙØ¨Ø©",
            "Ø§ÙØµØ¹ÙØ¨Ø© ÙÙ ÙÙØ§Ø±Ø³Ø© Ø§ÙØ£ÙØ´Ø·Ø© Ø§ÙØ§Ø¹ØªÙØ§Ø¯ÙØ©",
            "Ø§ÙÙØ¬Ø±Ø© Ø§ÙØ¯ÙÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù Ø§ÙØ³ÙÙØ§Øª Ø§ÙØ®ÙØ³ Ø§ÙØ£Ø®ÙØ±Ø©",
            "Ø£Ø­Ø¯Ø§Ø« Ø§ÙÙÙØ§Ø© Ø¶ÙÙ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù Ø§ÙØ®ÙØ³ Ø³ÙÙØ§Øª Ø§ÙØ£Ø®ÙØ±Ø©",
            "Ø§ÙÙØ¬ÙÙÙØ±Ø©",
            "Ø§ÙØ£ÙÙØ© ÙØ§ÙÙØºØ§Øª",
            "Ø§ÙØªØ¹ÙÙÙ",
            "Ø§ÙÙØ´ÙØ§Ø· Ø§ÙØ§ÙØªØµØ§Ø¯Ù ÙØ§ÙØªÙÙÙ ÙÙÙØ¹ÙÙ",
            "Ø§ÙØ­ÙØ§ÙØ© Ø§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ©",
            "Ø§Ø³ØªØ¹ÙØ§Ù Ø£Ø¬ÙØ²Ø© ØªÙÙÙÙÙØ¬ÙØ§ Ø§ÙÙØ¹ÙÙÙØ§Øª ÙØ§ÙØ§ØªØµØ§ÙØ§Øª",
            "Ø¸Ø±ÙÙ Ø³ÙÙ Ø§ÙØ£Ø³Ø±Ø©",
            "Ø­Ø§ÙØ§Øª Ø¹Ø§ÙØ©"
            # Add more module titles as needed
        ]

        # Create buttons based on the list of module titles
        button_list = [{"title": title, "payload": f"module_definitions{i+1}"} for i, title in enumerate(module_titles)]

        # # Generate the utterance with buttons
        # message = {
        #     "text": "Ø§Ø¶ØºØ· Ø¹ÙÙ Ø§Ø³Ù Ø§ÙÙØ­Ø¯Ø© ÙÙØ­ØµÙÙ Ø¹ÙÙ ØªØ¹Ø±ÙÙÙØ§",
        #     "buttons": buttons
        # }

        # dispatcher.utter_message(attachment=message)
            
        dispatcher.utter_message(text= "Ø§Ø¶ØºØ· Ø¹ÙÙ Ø§Ø³Ù Ø§ÙÙØ­Ø¯Ø© ÙÙØ­ØµÙÙ Ø¹ÙÙ ØªØ¹Ø±ÙÙÙØ§", buttons=button_list)

        return []
    
class ActionGetModuleDefinitions(Action):
    def name(self) -> Text:
        return "action_get_module_definitions"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Get the entire dictionary of definitions
        definitions_dict = {
            "module_definitions1": "Ø§ÙÙØ¨Ø§Ø¯Ø¦ ÙØ§ÙÙØµØ·ÙØ­Ø§Øª Ø§ÙØ£Ø³Ø§Ø³ÙØ© ÙÙ ÙØ¬Ø§Ù Ø§ÙØ¥Ø­ØµØ§Ø¡ Ø§ÙØ³ÙØ§ÙÙ ÙØ§ÙØ¹ÙØ±Ø§ÙØ Ø¨ÙØ§ ÙÙ Ø°ÙÙ ÙÙØ§ÙÙÙ ÙØ«Ù Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙÙÙØ·ÙØ© Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙØ§ÙØ¨ÙØ§ÙØ© ÙØ§ÙÙØ³ÙÙ ÙØ£ÙÙØ§Ø¹ Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙØ®ØªÙÙØ© ÙØ§ÙÙØµØ·ÙØ­Ø§Øª Ø°Ø§Øª Ø§ÙØµÙØ©",
            "module_definitions2": "ØªØ­Ø¯ÙØ¯ Ø¨ÙÙØ© Ø§ÙØ£Ø³Ø±Ø© ÙØ¹Ø¯Ø¯ Ø£ÙØ±Ø§Ø¯ÙØ§ ÙØªØ­Ø¯ÙØ¯ Ø§ÙØ¹ÙØ§ÙØ§Øª Ø¨ÙÙÙÙ ÙÙØ°ÙÙ ØªÙØ«ÙÙ ÙØ¹ÙÙÙØ§Øª Ø­ÙÙ ÙÙÙØ§ØªÙÙ ÙØ®ØµØ§Ø¦ØµÙÙ Ø§ÙØ¯ÙÙÙØºØ±Ø§ÙÙØ©",
            "module_definitions3": "ØªÙØ«ÙÙ Ø§ÙØ®ØµØ§Ø¦Øµ Ø§ÙØ±Ø¦ÙØ³ÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©Ø ÙØ«Ù Ø§ÙØ¹ÙØ±Ø ÙØ§ÙØ¬ÙØ³Ø ÙØ§ÙØ­Ø§ÙØ© Ø§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ©Ø ÙØ§ÙØ¬ÙØ³ÙØ©Ø ÙØ£Ù Ø®ØµØ§Ø¦Øµ Ø£Ø®Ø±Ù ØªØ±ØªØ¨Ø· Ø¨Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©",
            "module_definitions4": "ØªØ³Ø¬ÙÙ Ø¹Ø¯Ø¯ Ø§ÙØ£Ø·ÙØ§Ù Ø§ÙÙÙÙÙØ¯ÙÙ ÙÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù ÙØªØ±Ø© Ø²ÙÙÙØ© ÙØ¹ÙÙØ©Ø ÙØªØ­Ø¯ÙØ¯ ÙØ¹Ø¯Ù Ø§ÙØ®ØµÙØ¨Ø© ÙÙ Ø§ÙØ£Ø³Ø±Ø©",
            "module_definitions5": "ØªÙÙÙÙ ÙØ¯Ù Ø§ÙØµØ¹ÙØ¨Ø© Ø£Ù Ø§ÙØ³ÙÙÙØ© ÙÙ Ø£Ø¯Ø§Ø¡ Ø§ÙØ£ÙØ´Ø·Ø© Ø§ÙÙÙÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø ÙØ«Ù Ø§ÙØ­Ø±ÙØ©Ø ÙØ§ÙØ¹ÙØ§ÙØ© Ø§ÙØ°Ø§ØªÙØ©Ø ÙØºÙØ±ÙØ§",
            "module_definitions6": "ØªØ³Ø¬ÙÙ Ø­Ø±ÙØ© Ø§ÙÙØ¬Ø±Ø© Ø§ÙØ¯ÙÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©Ø Ø¨ÙØ§ ÙÙ Ø°ÙÙ Ø§ÙÙØ¬Ø±Ø© Ø¥ÙÙ ÙÙÙ Ø§ÙØ¨ÙØ§Ø¯",
            "module_definitions7": "ØªØ³Ø¬ÙÙ ÙØªÙØ«ÙÙ Ø§ÙØ­ÙØ§Ø¯Ø« Ø§ÙÙØªØ¹ÙÙØ© Ø¨Ø§ÙÙÙÙØ§Øª ÙÙ Ø¯Ø§Ø¦Ø±Ø© Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù Ø§ÙÙØªØ±Ø© Ø§ÙÙØ­Ø¯Ø¯Ø©",
            "module_definitions8": "Ø±ØµØ¯ ÙØªÙØ«ÙÙ Ø­Ø±ÙØ© Ø§ÙØªÙÙÙ ÙÙØ£ÙØ±Ø§Ø¯ Ø¨ÙÙ Ø§ÙÙÙØ§Ø·Ù Ø§ÙØ¬ØºØ±Ø§ÙÙØ© Ø¯Ø§Ø®Ù Ø§ÙØ¨ÙØ§Ø¯",
            "module_definitions9": "ØªØ­Ø¯ÙØ¯ ÙØ³ØªÙÙ Ø§ÙØ£ÙÙØ© ÙØ§ÙÙØºØ§Øª Ø§ÙØªÙ ÙØ¬ÙØ¯ÙÙÙØ§ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø©",
            "module_definitions10": "ØªÙØ«ÙÙ ÙØ³ØªÙÙ Ø§ÙØªØ¹ÙÙÙ ÙØ§ÙØªØ­ØµÙÙ Ø§ÙØ¯Ø±Ø§Ø³Ù ÙÙÙ ÙØ±Ø¯ ÙÙ Ø§ÙØ£Ø³Ø±Ø©",
            "module_definitions11": "ØªØ­Ø¯ÙØ¯ ÙØµØ¯Ø± Ø§ÙØ¹ÙØ´ ÙØ§ÙÙØ´Ø§Ø· Ø§ÙØ§ÙØªØµØ§Ø¯Ù Ø§ÙØ±Ø¦ÙØ³Ù ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙØ·Ø±ÙÙØ© Ø§ÙØªÙÙÙ Ø¥ÙÙ ÙÙØ§Ù Ø§ÙØ¹ÙÙ",
            "module_definitions12": "ØªÙØ«ÙÙ Ø§Ø³ØªÙØ§Ø¯Ø© Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙÙ Ø¨Ø±Ø§ÙØ¬ Ø§ÙØ­ÙØ§ÙØ© Ø§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ© ÙØ§ÙØ¶ÙØ§Ù Ø§ÙØ§Ø¬ØªÙØ§Ø¹Ù",
            "module_definitions13": "ØªÙÙÙÙ ÙØªÙØ«ÙÙ Ø§Ø³ØªØ®Ø¯Ø§Ù Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙÙØªÙÙÙÙÙØ¬ÙØ§ Ø§ÙØ­Ø¯ÙØ«Ø© ÙØ«Ù Ø§ÙØ¥ÙØªØ±ÙØª ÙØ§ÙÙÙØ§ØªÙ Ø§ÙØ°ÙÙØ©",
            "module_definitions14": "ØªÙØ«ÙÙ ÙØ¹ÙÙÙØ§Øª Ø­ÙÙ Ø³ÙÙ Ø§ÙØ£Ø³Ø±Ø© Ø¨ÙØ§ ÙÙ Ø°ÙÙ ÙÙØ¹ Ø§ÙØ¥ÙØ§ÙØ© ÙØ§ÙØ­Ø§ÙØ© Ø§ÙØµØ­ÙØ© ÙÙÙØ³ÙÙ ÙÙØ±Ø§ÙÙÙ",
            "module_definitions15":"Ø­Ø§ÙØ§Øª Ø¹Ø§ÙØ©"
            # Add more definitions as needed
        }

        user_selection = tracker.latest_message.get('text')

        # Send the entire dictionary as a response
        dispatcher.utter_message(text=str(definitions_dict[user_selection]))

        return []
    
class ActionGetModuleDefinitions2(Action):
    def name(self) -> Text:
        return "action_get_module_definitions2"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Get the entire dictionary of definitions
        definitions_dict={
 'module_definitions1': 'Ø§ÙÙØ¨Ø§Ø¯Ø¦ ÙØ§ÙÙØµØ·ÙØ­Ø§Øª Ø§ÙØ£Ø³Ø§Ø³ÙØ© ÙÙ ÙØ¬Ø§Ù Ø§ÙØ¥Ø­ØµØ§Ø¡ Ø§ÙØ³ÙØ§ÙÙ '
                        'ÙØ§ÙØ¹ÙØ±Ø§ÙØ Ø¨ÙØ§ ÙÙ Ø°ÙÙ ÙÙØ§ÙÙÙ ÙØ«Ù Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙÙÙØ·ÙØ© '
                        'Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙØ§ÙØ¨ÙØ§ÙØ© ÙØ§ÙÙØ³ÙÙ ÙØ£ÙÙØ§Ø¹ Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙØ®ØªÙÙØ© '
                        'ÙØ§ÙÙØµØ·ÙØ­Ø§Øª Ø°Ø§Øª Ø§ÙØµÙØ©',
 'module_definitions10': 'ÙÙØ¯Ù ÙØ­ÙØ± Ø§ÙØªØ¹ÙÙÙ ÙÙ Ø§ÙØ§Ø³ØªÙØ§Ø±Ø© Ø¥ÙÙ ØªØ­Ø¯ÙØ¯ Ø§Ø³ØªÙØ§Ø¯Ø© '
                         'Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø± ÙÙ Ø§ÙØªØ¹ÙÙÙ Ø¨ÙØ®ØªÙÙ ÙØ³ØªÙÙØ§ØªÙØ ÙØ°ÙÙ ÙÙ Ø®ÙØ§Ù '
                         'Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø¹Ù Ø¹Ø¯Ø© ÙÙØ·. Ø¨Ø¯Ø¡ÙØ§ Ø¨Ø§ÙØ§Ø³ØªÙØ§Ø¯Ø© ÙÙ Ø§ÙØªØ¹ÙÙÙ '
                         'Ø§ÙØ£ÙÙÙØ Ø§ÙÙØ³ØªÙÙ Ø§ÙØªØ¹ÙÙÙÙ Ø§ÙØ¹Ø§Ù ÙÙÙØ¹ÙØ Ø§ÙØ¯Ø±Ø§Ø³Ø© Ø®ÙØ§Ù '
                         'Ø§ÙØ³ÙØ© Ø§ÙØ¯Ø±Ø§Ø³ÙØ© 2023-2024Ø Ø«Ù Ø£Ø¹ÙÙ Ø¯Ø¨ÙÙÙ Ø£Ù Ø´ÙØ§Ø¯Ø© '
                         'ÙØ­ØµÙ Ø¹ÙÙÙØ§ ÙÙ Ø§ÙØªØ¹ÙÙÙ Ø§ÙØ¹Ø§Ù ÙØ§ÙØªÙÙÙÙ Ø§ÙÙÙÙÙ.',
 'module_definitions11': 'ÙÙ ÙØ­ÙØ± Ø§ÙÙØ´Ø§Ø· Ø§ÙØ§ÙØªØµØ§Ø¯Ù ÙØ§ÙØªÙÙÙ ÙÙØ¹ÙÙØ ØªÙØª Ø¨Ø±ÙØ¬Ø© '
                         'Ø¹Ø¯Ø© Ø£Ø³Ø¦ÙØ© ØªÙÙÙ ÙÙ ØªØµÙÙÙ Ø§ÙØ³ÙØ§Ù Ø§ÙØ¥Ø¹ØªÙØ§Ø¯ÙÙÙ Ø­Ø³Ø¨ ÙÙØ¹ '
                         'ÙØ´Ø§Ø·ÙÙ Ø§ÙØ§ÙØªØµØ§Ø¯Ù ÙØªØ¬ÙÙØ¹ Ø¨ÙØ§ÙØ§Øª Ø­ÙÙ Ø§ÙÙÙÙ ÙØ§ÙØªÙÙÙ '
                         'ÙÙØ¹ÙÙ. ÙØªÙ Ø°ÙÙ Ø¹Ø¨Ø± Ø§ÙØ§Ø³ØªÙØ³Ø§Ø±Ø§ Ø¹Ù ÙÙØ¹ Ø§ÙÙØ´Ø§Ø· '
                         'Ø§ÙØ§ÙØªØµØ§Ø¯ÙØ ØªØ­Ø¯ÙØ¯ Ø§ÙÙÙÙØ© ÙØ§ÙØ­Ø§ÙØ© ÙÙ Ø§ÙÙÙÙØ© ÙØ§ÙÙØ´Ø§Ø· '
                         'Ø§ÙØ±Ø¦ÙØ³Ù ÙÙÙØ¤Ø³Ø³Ø©Ø Ø«Ù ØªØ­Ø¯ÙØ¯ ÙÙØ§Ù Ø§ÙØ¹ÙÙ ÙÙØ³ÙÙØ© Ø§ÙØªÙÙÙ '
                         'Ø§ÙÙØ³ØªØ¹ÙÙØ©. ÙØ°Ù Ø§ÙØ¨ÙØ§ÙØ§Øª Ø³ØªÙÙÙÙ ÙÙ ØªÙÙÙØ± ÙØ§Ø¹Ø¯Ø© Ø¨ÙØ§ÙØ§Øª '
                         'ÙÙÙØ© ÙØªÙÙÙÙ Ø§ÙØ¨Ø±Ø§ÙØ¬ Ø§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ© ÙØ§ÙØ§ÙØªØµØ§Ø¯ÙØ© ÙÙØ°Ø§ ÙØ¶Ø¹ '
                         'Ø§Ø³ØªØ±Ø§ØªÙØ¬ÙØ§Øª ÙØ³ØªÙØ¨ÙÙØ© ÙØªØ­ÙÙÙ Ø§ÙØ£ÙØ¯Ø§Ù Ø§ÙÙØ³Ø·Ø±Ø© Ø³ÙØ§Ø¡ '
                         'ÙÙÙØ§ ÙØªØ¹ÙÙ Ø¨Ø£ÙØ¯Ø§Ù Ø§ÙØªÙÙÙØ© Ø§ÙÙØ³ØªØ¯Ø§ÙØ© ÙØ³ÙØ© 2030 Ø£Ù '
                         'Ø£ÙØ¯Ø§Ù Ø§ÙÙÙÙØ°Ø¬ Ø§ÙØªÙÙÙÙ Ø§ÙØ¬Ø¯ÙØ¯ ÙÙ Ø£ÙÙ Ø³ÙØ© 2035',
 'module_definitions12': 'ÙÙ Ø³ÙØ§Ù ØªØ¹ÙÙÙ Ø§ÙØ­ÙØ§ÙØ© Ø§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ©Ø Ø³ÙØªÙ ØªØ¬ÙÙØ¹ '
                         'Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙØªØ¹ÙÙØ© Ø¨ÙØ°Ø§ Ø§ÙÙÙØ¶ÙØ¹ ÙÙØªÙ Ø±Øµ Ø§ÙØªÙØ¯Ù '
                         'Ø§ÙÙÙØ­Ø±Ø² ÙÙ ÙØ°Ø§ Ø§ÙÙØ¬Ø§Ù. ÙÙ Ø§ÙØ¬Ø²Ø¡ Ø§ÙØ£ÙÙØ Ø³ÙØªÙ '
                         'Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø¹Ù Ø§ÙØ§ÙØ®Ø±Ø§Ø· Ø£Ù Ø§ÙØ§Ø³ØªÙØ§Ø¯Ø© ÙÙ Ø£ÙØ¸ÙØ© Ø§ÙØªØºØ·ÙØ© '
                         'Ø§ÙØµØ­ÙØ© (AMOØ AMO ØªØ¶Ø§ÙÙØ Ø´Ø±ÙØ© ØªØ£ÙÙÙ Ø®Ø§ØµØ©Ø ÙØ¤Ø³Ø³Ø© Ø£Ø®Ø±Ù '
                         'ÙÙØªØ¶Ø§ÙÙ). ÙÙÙ Ø§ÙØ¬Ø²Ø¡ Ø§ÙØ«Ø§ÙÙØ Ø³ÙØªÙ ØªØ¬ÙÙØ¹ Ø§ÙÙØ¹Ø·ÙØ§Øª Ø­ÙÙ '
                         'Ø§ÙØ¥ÙØ®Ø±Ø§Ø· Ø£Ù Ø§ÙØ§Ø³ØªÙØ§Ø¯Ø© ÙÙ Ø¥Ø­Ø¯Ù Ø£ÙØ¸ÙØ© Ø§ÙØªÙØ§Ø¹Ø¯ Ø§ÙÙØºØ±Ø¨ÙØ© '
                         '( CMRØ CNSSØ RCARØ CIMR)',
 'module_definitions13': 'ÙÙØªÙ ÙØ­ÙØ± Ø§Ø³ØªØ¹ÙØ§Ù ØªÙÙÙÙÙØ¬ÙØ§ Ø§ÙÙØ¹ÙÙÙØ§Øª ÙØ§ÙØ§ØªØµØ§ÙØ§Øª Ø¥ÙÙ '
                         'ØªØ­Ø¯ÙØ¯ ÙØ¯Ù ØªÙÙØ± Ø§ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ¨Ø§ÙØºÙÙ 5 Ø³ÙÙØ§Øª ÙØ£ÙØ«Ø± Ø¹ÙÙ '
                         'ÙØ§ØªÙ ÙÙØ§Ù Ø®Ø§Øµ Ø°ÙÙ Ø£Ù Ø¹Ø§Ø¯ÙØ Ø¬ÙØ§Ø² ÙÙØ¨ÙÙØªØ± ÙÙØªØ¨Ù Ø®Ø§Øµ Ø£Ù '
                         'ÙÙØ¨ÙÙØªØ± ÙØ­ÙÙÙ Ø®Ø§Øµ Ø£Ù ÙÙØ­Ø© Ø¥ÙÙØªØ±ÙÙÙØ© Ø®Ø§ØµØ©Ø ÙÙØ°ÙÙ ÙØ¯Ù '
                         'Ø§Ø³ØªØ¹ÙØ§ÙÙÙ ÙÙØ£ÙØªØ±ÙÙØª Ø®ÙØ§Ù Ø§ÙØ«ÙØ§Ø« Ø£Ø´ÙØ± Ø§ÙØ£Ø®ÙØ±Ø©. ÙÙ ÙØ°Ù '
                         'Ø§ÙÙØ¹Ø·ÙØ§Øª Ø§ÙØ¥Ø­ØµØ§Ø¦ÙØ© Ø³ØªÙÙÙ ÙÙ ØªÙÙÙÙ ÙØ³ØªÙÙ Ø§ÙÙØ¤ÙØ´Ø±Ø§Øª '
                         'Ø§ÙÙØ±ØªØ¨Ø·Ø© Ø¨Ø£ÙØ¯Ø§Ù Ø§ÙØªÙÙÙØ© Ø§ÙÙØ³ØªØ¯Ø§ÙØ© ÙØ³ÙØ© 2030.',
 'module_definitions14': 'ÙÙ Ø£Ø¬Ù ØªØ­Ø¯ÙØ¯ Ø§ÙØ¸Ø±ÙÙ Ø§ÙØ³ÙÙÙØ© ÙÙÙ Ø£Ø³Ø±Ø© ØªÙØª Ø¨Ø±ÙØ¬Øª Ø³ÙØ³ÙØ© '
                         'ÙÙ Ø§ÙØ£Ø³Ø¦ÙØ© Ø­ÙÙ Ø®Ø§ØµÙØ§Øª Ø§ÙÙØ³ÙÙ ÙÙÙÙÙØ© Ø§Ø³ØªØ¹ÙØ§Ù Ø¨Ø¹Ø¶ '
                         'ØªØ¬ÙÙØ²Ø§ØªÙ. ÙØ°Ù Ø§ÙØ¨ÙØ§ÙØ§Øª ØªØ³Ø§Ø¹ Ø¨Ø´ÙÙ ÙØ¨ÙØ± ÙÙ ØªÙØ¯ÙØ± '
                         'Ø§Ø­ØªÙØ§Ø¬Ø§Øª Ø§ÙØ¥Ø³ÙØ§Ù ÙØ§ÙÙØ¬Ø§Ø­ ÙÙ Ø§ÙØªØ®Ø·ÙØ· ÙØ¨Ø±Ø§ÙØ¬ Ø§ÙØ¥Ø³ÙØ§Ù. '
                         'ÙÙØ°ÙØ± Ø¨Ø£Ù ØªØ¹Ø±ÙÙ Ø§ÙÙØ³ÙÙ ÙÙ Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙÙ Ø§ÙÙÙØ§Ù Ø§ÙØ°Ù '
                         'ØªØ¹ÙØ´ ÙÙÙ Ø§ÙØ£Ø³Ø±Ø©Ø ÙÙÙÙÙ Ø£Ù ÙÙÙÙ Ø¹Ø¨Ø§Ø±Ø© Ø¹Ù Ø­Ø¬Ø±Ø© ÙØ§Ø­Ø¯Ø© '
                         'Ø£Ù Ø¹Ø¯Ø© Ø­Ø¬Ø±Ø§Øª ÙØ®ØµØµØ© ÙÙØ³ÙÙØ ÙØ§ÙÙØ³ÙÙ ÙØªÙÙØ± Ø¹ÙÙ ÙØ¯Ø®Ù Ø£Ù '
                         'Ø¹Ø¯Ø© ÙØ¯Ø§Ø®Ù ÙØ¨Ø§Ø´Ø±Ø©. ÙØªÙ Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± ÙÙ ÙØ°Ø§ Ø§ÙÙØ­ÙØ± Ø­ÙÙ '
                         'Ø®ØµØ§Ø¦Øµ ÙØ°Ø§ Ø§ÙÙØ³ÙÙØ ÙØªÙÙØ± Ø§ÙØ£Ø³Ø±Ø© Ø¹ÙÙ Ø¨Ø¹Ø¶ Ø§ÙØªØ¬ÙÙØ²Ø§Øª '
                         'Ø§ÙØ£Ø³Ø§Ø³ÙØ©Ø ÙÙØ°Ø§ Ø§ÙÙØ³Ø§ÙØ© Ø§ÙØªÙ ØªÙØµÙ Ø§ÙÙØ³ÙÙ Ø¹ÙÙ Ø¨Ø¹Ø¶ '
                         'Ø§ÙÙØ±Ø§ÙÙ ÙØ§ÙØªØ¬ÙÙØ²Ø§Øª Ø§ÙØ£Ø³Ø§Ø³ÙØ© ÙÙØ¹Ø·ÙØ§Øª Ø£Ø®Ø±Ù ØªØµÙ Ø¸Ø±ÙÙ '
                         'Ø³ÙÙ Ø§ÙØ£Ø³Ø±Ø©.',
 'module_definitions15': 'ØªÙØ¯Ù Ø§ÙØ£Ø³Ø¦ÙØ© ÙØ§ÙØ£Ø¬ÙØ¨Ø© Ø­ÙÙ Ø§ÙØ­Ø§ÙØ§Øª Ø§ÙØ¹Ø§ÙØ© ÙØªØ£Ø·ÙØ± ØªØµØ±Ù '
                         'Ø§ÙØ¨Ø§Ø­Ø« Ø£Ø«ÙØ§Ø¡ ØªØ¹Ø§ÙÙ ÙØ¹ ÙØ®ØªÙÙ Ø§ÙØ£Ø³Ø±Ø Ø³ÙØ§Ø¡Ù ÙØ§Ù Ø°ÙÙ ÙÙ '
                         'Ø§Ø±ØªØ¨Ø§Ø· ÙØ¨Ø§Ø´Ø± ÙØ¹ ÙÙØ£ Ø§ÙØ¥Ø³ØªÙØ§Ø±Ø©Ø Ø£Ù ÙØ§Ù Ø¹Ø§ÙØ§Ù ÙØ«Ù '
                         'Ø§ÙØ­ØµÙÙ Ø¹ÙÙ Ø¯Ø¹ÙØ© ÙØ´Ø±Ø¨ Ø§ÙØ´Ø§Ù ÙØ¹ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙØºÙØ±ÙØ§. '
                         'ÙÙØ°Ø§ ÙÙØªÙ ØªØ£Ø·ÙØ± Ø§ÙØ£ÙØ¹Ø§Ù ÙØ§ÙÙÙÙØ§ ÙØ£Ø®ÙØ§ÙÙØ§Ø ÙÙØ°Ø§ ØªØ³ÙÙÙ '
                         'Ø¹ÙÙÙØ© Ø§ÙØ§Ø³ØªØ¬ÙØ§Ø¨ ÙÙÙØ£ Ø§ÙØ¥Ø³ØªÙØ§Ø±Ø©.',
 'module_definitions2': 'ØªÙØ¯Ù ÙÙØ±Ø© ØªØ­Ø¯ÙØ¯ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø¥ÙÙ ØªØ¹Ø¯Ø§Ø¯ Ø§ÙØ³ÙØ§Ù '
                        'Ø§ÙÙÙÙÙÙÙ Ø§ÙØ¥Ø¹ØªÙØ§Ø¯ÙÙÙ Ø¶ÙÙ Ø§ÙØ£Ø³Ø± Ø§ÙÙØ§Ø·ÙØ© Ø¨ÙÙ ÙÙØ·ÙØ© '
                        'Ø¥Ø­ØµØ§Ø¡. Ø¨Ø­ÙØ« Ø£Ù Ø§ÙØ£Ø³Ø±Ø© Ø¨ÙÙÙÙÙ Ø§ÙØ¥Ø­ØµØ§Ø¡ ÙÙ ÙØ¬ÙÙØ¹Ø© ÙÙ '
                        'Ø§ÙØ£Ø´Ø®Ø§Øµ ÙÙÙÙÙÙ Ø¨ØµÙØ© Ø¥Ø¹ØªÙØ§Ø¯ÙØ© Ø¨ÙØ³ÙÙ ÙØ§Ø­Ø¯ Ø£Ù Ø¬Ø²Ø¡ ÙÙÙØ '
                        'ÙØªÙÙÙ ÙÙÙ ÙÙÙØ§Øª ÙØ´ØªØ±ÙØ©. ÙØ§ÙÙÙÙÙ Ø§ÙØ¥Ø¹ØªÙØ§Ø¯Ù ÙÙ ÙÙ ÙØ±Ø¯ '
                        'Ø£Ø³Ø±Ø© ÙÙÙÙ Ø¨Ø§ÙÙØ³ÙÙ Ø£Ù ÙÙ ÙÙØ© Ø§ÙØ¥ÙØ§ÙØ© Ø¨Ù ÙÙØ¯Ø© ÙØ§ ØªÙÙ Ø¹Ù '
                        '6 Ø£Ø´ÙØ±.',
 'module_definitions3': 'Ø§ÙØºØ±Ø¶ ÙÙ ØªØ­Ø¯ÙØ¯ Ø§ÙÙÙÙØ²Ø§Øª Ø§ÙØ¯ÙÙÙØºØ±Ø§ÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙÙ '
                        'ÙØ¹Ø±ÙØ© ÙÙÙØ²Ø§Øª Ø§ÙØ³ÙØ§Ù Ø§ÙØ¥Ø¹ØªÙØ§Ø¯ÙÙÙ ÙØªØ±ÙÙØ¨ØªÙÙ. Ø§ÙØ³Ù '
                        'ÙØ§ÙØ¬ÙØ³ ÙÙ Ø£ÙØ«Ø± Ø§ÙØ®Ø§ØµÙØ§Øª Ø§ÙØªÙ ØªØªÙ Ø¬Ø¯ÙÙØ© ÙØ¹ÙÙÙØ§ØªÙØ§ Ø¨ØµÙØ© '
                        'ÙØªØ±Ø§Ø¨Ø·Ø© ÙØ¹ Ø§ÙÙØ¹Ø·ÙØ§Øª Ø§ÙØ£Ø®Ø±Ù Ø§ÙÙÙØ¬ÙÙØ¹Ø© ÙÙ Ø¨Ø§ÙÙ Ø£Ø¬Ø²Ø§Ø¡ '
                        'Ø§ÙØ¥Ø³ØªÙØ§Ø±Ø©. ØªØ³Ø§Ø¹Ø¯ ÙØ°Ù Ø§ÙØ¨ÙØ§ÙØ§Øª ÙÙ ØªØ­ÙÙÙ ØªØ·ÙØ± Ø§ÙÙÙÙØ²Ø§Øª '
                        'Ø§ÙØ¯ÙÙÙØºØ±Ø§ÙÙØ© ÙÙ Ø§ÙØ²ÙÙ. ÙØªÙ Ø£ÙØ¶Ø§ ØªØ¬ÙÙØ¹ Ø§ÙØ¨ÙØ§ÙØ§Øª Ø¹Ù '
                        'Ø§ÙØ¬ÙØ³ÙØ©Ø Ø§ÙØªØ³Ø¬ÙÙ ÙÙ Ø¯ÙØªØ± Ø§ÙØ­Ø§ÙØ© Ø§ÙÙØ¯ÙÙØ©Ø Ø§ÙØ­Ø§ÙØ© '
                        'Ø§ÙØ²ÙØ§Ø¬ÙØ© ÙØ§ÙØ³Ù Ø¹ÙØ¯ Ø§ÙØ²ÙØ§Ø¬ Ø§ÙØ£ÙÙ.',
 'module_definitions4': 'ÙÙØ¯Ù Ø¥Ø¯Ø±Ø§Ø¬ Ø§ÙØ£Ø³Ø¦ÙØ© Ø­ÙÙ Ø§ÙØ®ØµÙØ¨Ø© ÙØ¬ÙØ¹ Ø§ÙØ¨ÙØ§ÙØ§Øª Ø¥ÙÙ '
                        'Ø¯Ø±Ø§Ø³Ø© Ø¸Ø§ÙØ±Ø© Ø§ÙØ®ØµÙØ¨Ø© ÙÙÙÙØ§Øª Ø§ÙØ±Ø¶Ø¹ ÙØ§ÙØ£Ø·ÙØ§ÙØ ÙØ§ÙØ­ØµÙÙ '
                        'Ø¹ÙÙ ÙØ¹ÙÙÙØ§Øª Ø¯ÙÙÙØ© ÙÙØªØ®Ø·ÙØ· ÙØ§ØªØ®Ø§Ø° Ø§ÙÙØ±Ø§Ø±Ø§Øª Ø§ÙØµØ­ÙØ© '
                        'ÙØ§ÙØ§Ø¬ØªÙØ§Ø¹ÙØ©. ÙØ¬Ø¨ Ø§ÙØªÙÙÙÙ Ø¥ÙÙ Ø£Ù Ø¬ÙÙØ¹ Ø§ÙØ£Ø³Ø¦ÙØ© Ø­ÙÙ '
                        'Ø§ÙØ®ØµÙØ¨Ø© ØªÙÙ Ø§ÙÙÙØ§ÙÙØ¯ Ø§ÙØ£Ø­ÙØ§Ø¡ (Ø§ÙÙÙØ§ÙÙØ¯ Ø§ÙØ°ÙÙ Ø¸ÙØ±Øª '
                        'Ø¹ÙÙÙÙ Ø¨Ø¹Ø¯ Ø§ÙÙÙØ§Ø¯Ø© Ø¹ÙØ§ÙØ§Øª Ø§ÙØ­ÙØ§Ø© ÙØ§ÙØªÙÙØ³ ÙØ§ÙØµØ±Ø§Ø® Ø£Ù '
                        'Ø¯ÙØ§Øª Ø§ÙÙÙØ¨) ÙÙÙØ³ Ø§ÙÙÙØ§ÙÙØ¯ Ø§ÙØ£ÙÙØ§Øª (Ø§ÙÙÙØ§ÙÙØ¯ Ø§ÙØ°ÙÙ ÙÙ '
                        'ØªØ¸ÙØ± Ø¹ÙÙÙÙ Ø¹ÙØ§ÙØ§Øª Ø§ÙØ­ÙØ§Ø© Ø¨Ø¹Ø¯ Ø§ÙÙÙØ§Ø¯Ø©). ÙØªÙÙØ³Ù Ø§ÙØ®ØµÙØ¨Ø© '
                        'Ø¥ÙÙ Ø®ØµÙØ¨Ø© Ø¥Ø¬ÙØ§ÙÙØ© Ø£Ù Ø·ÙÙØ© Ø§ÙØ­ÙØ§Ø©Ø ÙØ¥ÙÙ Ø®ØµÙØ¨Ø© Ø­Ø§ÙÙØ© Ø£Ù '
                        'Ø®ÙØ§Ù 12 Ø´ÙØ±ÙØ§ Ø§ÙØ£Ø®ÙØ±Ø© ÙÙÙØ³Ø§Ø¡ ÙÙ Ø³Ù Ø§ÙØ¥ÙØ¬Ø§Ø¨ ÙÙØ·Ø ÙØ§ '
                        'Ø¨ÙÙ 15 Ù49 Ø³ÙØ©.',
 'module_definitions5': 'Ø¨ÙØ¯Ù Ø§ÙØ¥Ø­Ø§Ø·Ø© Ø¨Ø§ÙØµØ¹ÙØ¨Ø§Øª Ø§ÙØªÙ ÙÙØ§Ø¬ÙÙØ§ Ø§ÙØ£ÙØ±Ø§Ø¯ ÙÙ Ø§ÙÙÙØ§Ù '
                        'Ø¨Ø§ÙØ£ÙØ´Ø·Ø© Ø§ÙÙÙÙÙØ©Ø ÙØªÙ Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø¹Ù Ø¯Ø±Ø¬Ø© Ø§ÙØµØ¹ÙØ¨Ø© Ø§ÙØªÙ '
                        'ÙÙØ§Ø¬ÙÙØ§ Ø§ÙØ£ÙØ±Ø§Ø¯ Ø¨Ø®ØµÙØµ 6 ÙØ¸Ø§Ø¦Ù Ø£Ø³Ø§Ø³ÙØ©: Ø§ÙØ±Ø¤ÙØ© (Ø­ØªÙ ÙØ¹ '
                        'Ø§Ø³ØªØ¹ÙØ§Ù ÙØ¸Ø§Ø±Ø§Øª Ø·Ø¨ÙØ©)Ø Ø§ÙØ³ÙØ¹ (Ø­ØªÙ ÙØ¹ Ø§Ø³ØªØ¹ÙØ§Ù ÙØ³Ø§Ø¦Ù '
                        'Ø³ÙØ¹ÙØ©)Ø Ø§ÙØ­Ø±ÙØ© (Ø§ÙÙØ´Ù Ø£Ù ØµØ¹ÙØ¯ Ø§ÙØ¯Ø±Ø¬)Ø Ø§ÙØªÙØ§ØµÙ ÙØ¹ '
                        'Ø§ÙØ¢Ø®Ø±ÙÙØ Ø§ÙØªØ°ÙØ± ÙØ§ÙØªØ±ÙÙØ²Ø ÙØ§ÙØ§Ø¹ØªÙØ§Ø¡ Ø¨Ø§ÙØ°Ø§Øª (ÙØ«Ù '
                        'Ø§ÙØ§Ø³ØªØ­ÙØ§Ù ÙØ§Ø±ØªØ¯Ø§Ø¡ Ø§ÙÙÙØ§Ø¨Ø³). ÙØªÙ Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø¹Ù Ø¯Ø±Ø¬Ø© '
                        'Ø§ÙØµØ¹ÙØ¨Ø§Øª Ø§ÙÙÙØ¨Ø«ÙØ© Ø¹Ù Ø§ÙÙØ´Ø§ÙÙ Ø§ÙØµØ­ÙØ© Ø§ÙØªÙ ÙØ¯ ØªÙØ§Ø¬Ù '
                        'Ø§ÙÙØ±Ø¯ Ø¹ÙØ¯ ÙÙØ§ÙÙ Ø¨Ø£ÙØ´Ø·Ø© ÙØ¹ÙÙØ©Ø Ø¨Ø¯ÙØ§Ù ÙÙ Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± '
                        'ÙØ¨Ø§Ø´Ø±Ø© Ø¹ÙØ§ Ø¥Ø°Ø§ ÙØ§Ù ÙØ¯ÙÙ Ø¥Ø¹Ø§ÙØ© ÙØ¹ÙÙØ©.',
 'module_definitions6': 'ÙÙ ÙØ­ÙØ± Ø§ÙÙØ¬Ø±Ø© Ø§ÙØ¯ÙÙÙØ© ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù Ø§ÙØ³ÙÙØ§Øª '
                        'Ø§ÙØ®ÙØ³ Ø§ÙØ£Ø®ÙØ±Ø©Ø ÙØªÙ ØªØ¬ÙÙØ¹ Ø§ÙÙØ¹Ø·ÙØ§Øª Ø§ÙØ®Ø§ØµØ© Ø¨ÙÙ Ø´Ø®Øµ ÙØ§Ù '
                        'Ø¶ÙÙ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© ÙÙØ§Ø¬Ø± Ø¥ÙÙ Ø®Ø§Ø±Ø¬ Ø§ÙÙØºØ±Ø¨ ÙÙ Ø§ÙÙØªØ±Ø© ÙØ§ '
                        'Ø¨ÙÙ 1 Ø´ØªÙØ¨Ø± 2019 Ù 31 ØºØ´Øª 2024. ÙØ°Ù Ø§ÙÙØ¹Ø·ÙØ§Øª ØªØ´ÙÙ Ø§Ø³Ù '
                        'Ø§ÙÙØ±Ø¯ Ø§ÙÙÙØ§Ø¬Ø±Ø ØªØ§Ø±ÙØ® Ø§ÙÙØ¬Ø±Ø© Ø§ÙØ£Ø®ÙØ±Ø©Ø Ø¬ÙØ³ ÙØ¬ÙØ³ÙØ© ÙØ³Ù '
                        'Ø§ÙÙØ±Ø¯ Ø§ÙÙÙØ§Ø¬Ø±Ø Ø«Ù Ø§ÙØ®Ø§ØµÙØ§Øª Ø§ÙÙØªØ¹ÙÙØ© Ø¨Ø§ÙØªØ¹ÙÙÙ ÙÙÙØ±Ø¯ Ø¹Ù '
                        'ÙØ¬Ø±ØªÙØ Ø«Ù Ø³Ø¨Ø¨ ÙØ¬Ø±ØªÙ Ù Ø¨ÙØ¯ Ø§ÙØ¥Ø³ØªÙØ¨Ø§Ù Ø¹ÙØ¯ ÙØ¬Ø±ØªÙ Ø§ÙØ£Ø®ÙØ±Ø©',
 'module_definitions7': 'ÙÙØªÙ ÙØ­ÙÙ Ø£Ø­Ø¯Ø§Ø« Ø§ÙÙÙØ§Ø© Ø¶ÙÙ Ø£ÙØ±Ø§Ø¯ Ø§ÙØ£Ø³Ø±Ø© Ø®ÙØ§Ù Ø§ÙØ®ÙØ³ '
                        'Ø³ÙÙØ§Øª Ø§ÙØ£Ø®ÙØ±Ø© Ø¨ØªØ­Ø¯ÙØ¯ Ø¬ÙÙØ¹ Ø£Ø­Ø¯Ø§Ø« Ø§ÙÙÙØ§Ø© Ø§ÙØªÙ ÙÙØ¹Øª ÙØ§ '
                        'Ø¨ÙÙ 1 Ø´ØªÙØ¨Ø± 2019 Ù 31 ØºØ´Øª 2024Ø Ø¶ÙÙ Ø§ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ°ÙÙ '
                        'ÙØ§ÙÙØ§ ÙÙÙÙÙÙ Ø¨ØµÙØ© Ø¥Ø¹ØªÙØ§Ø¯ÙØ© ÙØ¹ Ø§ÙØ£Ø³Ø±Ø©Ø ÙØ°ÙÙ Ø³ÙØ§Ø¡Ù ÙØ§ÙÙ '
                        'Ø±Ø¶Ø¹Ø§ Ø£Ù Ø£Ø·ÙØ§ÙØ§ Ø£Ù Ø¨Ø§ÙØºÙÙ ÙÙÙÙÙØ§ ÙØ§Ù Ø¬ÙØ³ÙÙ. Ø³ÙØªÙ ØªØ¬ÙÙØ¹ '
                        'Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙØªÙ ØªØªÙØ«Ù ÙÙ Ø§Ø³Ù Ø§ÙÙØ±Ø¯ Ø§ÙÙØªÙÙÙØ ØªØ§Ø±ÙØ® Ø£Ù '
                        'Ø³ÙØ© Ø§ÙÙÙØ§Ø©Ø Ø¬ÙØ³ÙØ Ø³ÙÙ Ø¹ÙØ¯ Ø§ÙÙÙØ§Ø©Ø Ø­Ø§ÙØªÙ Ø§ÙØ²ÙØ¬ÙØ© Ø¹ÙØ¯ '
                        'Ø§ÙÙÙØ§Ø©Ø Ø«Ù Ø£Ø®ÙØ±Ø§ Ø³Ø¨Ø¨ Ø§ÙÙÙØ§Ø©.',
 'module_definitions8': 'Ø§ÙØ£Ø³Ø¦ÙØ© Ø§ÙÙØªØ¹ÙÙØ© Ø¨Ø¸Ø§ÙØ±Ø© Ø§ÙÙØ¬Ø±Ø© ÙÙ Ø§ÙØ§Ø³ØªØ¨ÙØ§Ù ØªÙØ¯Ù Ø¥ÙÙ '
                        'Ø¯Ø±Ø§Ø³Ø© Ø­Ø±ÙØ© Ø§ÙÙØ¬Ø±Ø© Ø¨ÙÙ ÙØ®ØªÙÙ Ø§ÙÙØ­Ø¯Ø§Øª Ø§ÙØ¥Ø¯Ø§Ø±ÙØ© Ø¯Ø§Ø®Ù '
                        'Ø§ÙÙØºØ±Ø¨ Ù Ø§ÙØ­Ø±ÙØ© Ø§ÙØ³ÙØ§ÙÙØ© ÙØ§ Ø¨ÙÙ Ø§ÙÙØºØ±Ø¨ ÙØ§ÙØ¨ÙØ¯Ø§Ù '
                        'Ø§ÙØ£Ø®Ø±Ù. ÙÙØªÙ Ø°ÙÙ Ø¹Ø¨Ø± Ø§ÙØ§Ø³ØªÙØ³Ø§Ø± Ø¹Ù ÙÙØ§Ù Ø§Ø²Ø¯ÙØ§Ø¯ '
                        'Ø§ÙØ£ÙØ±Ø§Ø¯Ø ÙÙØ§Ù Ø¥ÙØ§ÙØªÙÙ ÙØ§ ÙØ¨Ù Ø§ÙØ­Ø§ÙÙØ©Ø ÙÙØ§Ù Ø§ÙØ¥ÙØ§ÙØ© '
                        'ÙÙÙØ© Ø¨Ø¯Ø§ÙØ© Ø§ÙØ­Ø¬Ø± Ø§ÙØµØ­Ù ÙØ¹Ù ÙØ§ Ø¥Ø°Ø§ ÙØ§Ù Ø§ÙÙØ±Ø¯ Ø³Ø¨Ù ÙÙ Ø£Ù '
                        'Ø£ÙØ§Ù Ø¨Ø®Ø§Ø±Ø¬ Ø§ÙÙØºØ±Ø¨ ÙØ³Ø¨Ø¨ Ø§ÙÙØ¯ÙÙ Ø£Ù Ø§ÙØ¹ÙØ¯Ø© ÙÙ ØªÙÙ '
                        'Ø§ÙØ­Ø§ÙØ©.',
 'module_definitions9': 'ÙØ­ÙØ± Ø§ÙØ£ÙÙØ© ÙØ§ÙÙØºØ§Øª ÙØªØ·Ø±Ù Ø¥ÙÙ 3 Ø£Ø¬Ø²Ø§Ø¡. Ø£ÙÙÙØ§ Ø§ÙØ£ÙÙØ©Ø '
                        'Ø§ÙØªÙ ØªÙØ¯Ù Ø£Ø³Ø¦ÙØªÙØ§ Ø¥ÙÙ ØªØ­Ø¯ÙØ¯ ÙØ¯Ù ÙØ¯Ø±Ø© Ø§ÙØ£ÙØ±Ø§Ø¯ Ø§ÙØ¨Ø§ÙØºÙÙ '
                        '10 Ø³ÙÙØ§Øª ÙØ£ÙØ«Ø± Ø¹ÙÙ Ø§ÙÙØ±Ø§Ø¡Ø© ÙØ§ÙÙØªØ§Ø¨Ø© ÙÙØ°ÙÙ Ø¹ÙÙ Ø§ÙÙÙØ§Ù '
                        'Ø¨Ø¹ÙÙÙØ§Øª Ø­Ø³Ø§Ø¨ÙØ© Ø°ÙÙÙØ© Ø£Ø«ÙØ§Ø¡ ÙÙØ§ÙÙÙ Ø¨Ø£ÙØ´Ø·ØªÙÙ Ø§ÙÙÙÙÙØ©. '
                        'Ø«Ø§ÙÙÙØ§ Ø§ÙÙØºØ§Øª Ø§ÙÙÙØ±ÙØ¡Ø© ÙØ§ÙÙÙØªÙØ¨Ø©Ø Ø¨Ø­ÙØ« ÙÙØ¯Ù ÙØ°Ø§ Ø§ÙØ¬Ø²Ø¡ '
                        'Ø¥ÙÙ ØªØ­Ø¯ÙØ¯ Ø§ÙÙØºØ§Øª Ø§ÙØªÙ ÙØªÙÙÙ Ø§ÙØ£ÙØ±Ø§Ø¯ ÙÙ Ø§ÙÙØ±Ø§Ø¡Ø© '
                        'ÙØ§ÙÙØªØ§Ø¨Ø© Ø¨ÙØ§ Ø­Ø³Ø¨ Ø¯Ø±Ø¬Ø© Ø§ÙØ¥ØªÙØ§Ù. ÙØ¢Ø®Ø±ÙØ§ Ø§ÙÙØºØ§Øª Ø§ÙÙØ­ÙÙØ© '
                        'Ø§ÙÙØ³ØªØ¹ÙÙØ©Ø Ø¨Ø­ÙØ« ÙØªÙ Ø§Ø³ØªÙØ³Ø§Ø± Ø§ÙØ£ÙØ±Ø§Ø¯ Ø¹Ù Ø£Ù ÙØºØ© ÙØ­ÙÙØ© '
                        'Ø£ÙØ«Ø± Ø§Ø³ØªØ¹ÙØ§ÙØ§ ÙÙ ØªØ¹Ø§ÙÙØ§ØªÙÙ Ø§ÙÙÙÙÙØ©.'}

        user_selection = tracker.latest_message.get('text')

        # Send the entire dictionary as a response
        dispatcher.utter_message(text=str(definitions_dict[user_selection]))

        return []

    
class LogConversation(Action):
    def name(self) -> Text:
        return "action_log_conversation"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:
        # Extract conversation data with message types and sender IDs
        sender_id = tracker.sender_id
        conversation_data = []

        for event in tracker.events:
            if 'text' in event:
                message = event['text']
                message_type = 'user' if event['event'] == "user" else 'bot'
                time = event.get('timestamp', '')
                conversation_data.append({'sender_id': sender_id, 'message': message, 'message_type': message_type, 'Time': time})

        # Format the date and time
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Specify the file path
        file_path = "conversation_log.txt"

        # Open the file in append mode and write the formatted datetime and conversation data
        with open(file_path, "a", encoding="utf-8") as file:
            file.write(f"Timestamp: {current_datetime}\n")
            for entry in conversation_data:
                # file.write(f"(sender_id: {entry['sender_id']}){entry['message_type'].capitalize()}: {entry['message']} (Time: {entry['Time']})\n")
                file.write(f"sender_id: {entry['sender_id']} , {entry['message_type'].capitalize()}: {entry['message']} , Time: {entry['Time']}\n")

            file.write("\n")  # Add a newline between conversations

        return []
    

    
